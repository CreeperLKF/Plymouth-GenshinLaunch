## Author : Creeper_LKF
## Mail : creeper_lkf@qq.com
## Github : @CreeperLKF

// if password is required during boot (e.g. luks enabled)
// the animation will stop at the password prompt until the password is entered
HAS_LUKS = 0; 
// number of pictures to load
PICTURE_NUM = 80;
// the animation will stop at STAGE_1_FRAME if luks enabled and end at STAGE_2_FRAME
STAGE_1_FRAME = 29;
STAGE_2_FRAME = 79;
// due to loading time of pictures, time should be wait before the animation starts
STAGE_0_SUBFRAME = 150;
// the refresh rate of the plymouth is 50fps (at most) and we need to divide them to slower the animation
STAGE_1_DIVISION = 4;
STAGE_2_DIVISION = 10;

if (HAS_LUKS == 0) {
  STAGE_1_FRAME = STAGE_2_FRAME;
  STAGE_1_DIVISION = STAGE_2_DIVISION;
}

if (Plymouth.GetMode () == "boot") {
  // Screen size
  screen.w = Window.GetWidth(0);
  screen.h = Window.GetHeight(0);
  screen.half.w = Window.GetWidth(0) / 2;
  screen.half.h = Window.GetHeight(0) / 2;
  screen.quat.w = Window.GetWidth(0) / 4;
  screen.quat.h = Window.GetHeight(0) / 4;

  // Question prompt
  question = null;
  answer = null;

  // Message
  message = null;

  // Password prompt
  bullets = null;
  prompt = null;
  bullet.image = Image.Text("*", 0.1, 0.1, 0.1, 1, "Sans 14");

  // Flow
  state.status = "play";
  state.time = 0.0;

  // Window
  Window.SetBackgroundTopColor(1, 1, 1);
  Window.SetBackgroundBottomColor(1, 1, 1);

  //--------------------------------- Refresh (Logo animation) --------------------------

  # cycle through all images
  for (i = 0; i < 1; i++) {
    genshin_image[i] = Image("Genshin_" + (i + 1) + ".png");
  }

  # Image
  image.w = genshin_image[0].GetWidth();
  image.h = genshin_image[0].GetHeight();

  genshin_sprite = Sprite();

  # set image position
  scale_factor = Math.Min(screen.w / image.w, screen.h / image.h);
  image.w *= scale_factor;
  image.h *= scale_factor;
  genshin_sprite.SetX(screen.half.w - image.w / 2);
  genshin_sprite.SetY(screen.half.h - image.h / 2);
  # genshin_sprite.Scale(image.w, image.h);

  # stretch the image
  for (i = 0; i < 1; i++) {
    genshin_image_fat[i] = genshin_image[i].Scale(image.w, image.h);
  }

  sub_progress = 0;
  progress = 0;
  progress_limit = STAGE_1_FRAME;
  locked = 0;

  fun refresh_callback () {
    genshin_sprite.SetImage(genshin_image_fat[progress]);
    # genshin_sprite.SetImage(Image.Text(progress, 0.1, 0.1, 0.1, 1, "Sans 14")); // for debugging
    if (state.status == "pause")
      locked = 1;
    else if (locked == 1)
      progress_limit = STAGE_2_FRAME;
    if ((locked && (sub_progress % STAGE_1_DIVISION == 0)) || (!locked && (sub_progress % STAGE_2_DIVISION == 0))) {
      if (sub_progress == 0) {
          for (i = 1; i < PICTURE_NUM; i++) {
            genshin_image[i] = Image("Genshin_" + (i + 1) + ".png");
            genshin_image_fat[i] = genshin_image[i].Scale(image.w, image.h);
          }
      } else if (sub_progress >= STAGE_0_SUBFRAME && progress < progress_limit) {
        progress ++;
      }
    }
    sub_progress ++;
  }

  Plymouth.SetRefreshFunction (refresh_callback);

  //------------------------------------- Password prompt -------------------------------
  fun DisplayQuestionCallback(prompt, entry) {
      question = null;
      answer = null;

      if (entry == "")
          entry = "<answer>";

      question.image = Image.Text(prompt, 0.1, 0.1, 0.1, 1, "Sans 14");
      question.sprite = Sprite(question.image);
      question.sprite.SetX(screen.half.w - question.image.GetWidth() / 2);
      question.sprite.SetY(screen.half.h + screen.quat.h - 3 * prompt.image.GetHeight());

      answer.image = Image.Text(entry, 0.1, 0.1, 0.1, 1, "Sans 14");
      answer.sprite = Sprite(answer.image);
      answer.sprite.SetX(screen.half.w - answer.image.GetWidth() / 2);
      answer.sprite.SetY(screen.half.h + screen.quat.h - 1 * answer.image.GetHeight());
  }
  Plymouth.SetDisplayQuestionFunction(DisplayQuestionCallback);

  //------------------------------------- Password prompt -------------------------------
  fun DisplayPasswordCallback(nil, bulletCount) {
      state.status = "pause";
      totalWidth = bulletCount * bullet.image.GetWidth();
      startPos = screen.half.w - totalWidth / 2;

      prompt.image = Image.Text("Enter Password", 0.1, 0.1, 0.1, 1, "Sans 14");
      prompt.sprite = Sprite(prompt.image);
      prompt.sprite.SetX(screen.half.w - prompt.image.GetWidth() / 2);
      prompt.sprite.SetY(screen.half.h + screen.quat.h - 3 * bullet.image.GetHeight());

      // Clear all bullets (user might hit backspace)
      bullets = null;
      for (i = 0; i < bulletCount; i++) {
          bullets[i].sprite = Sprite(bullet.image);
          bullets[i].sprite.SetX(startPos + i * bullet.image.GetWidth());
          bullets[i].sprite.SetY(screen.half.h + screen.quat.h - 1 * bullet.image.GetHeight());
      }
  }
  Plymouth.SetDisplayPasswordFunction(DisplayPasswordCallback);

  //--------------------------- Normal display (unset all text) ----------------------
  fun DisplayNormalCallback() {
      state.status = "play";
      bullets = null;
      prompt = null;
      message = null;
      question = null;
      answer = null;
  }
  Plymouth.SetDisplayNormalFunction(DisplayNormalCallback);

  //----------------------------------------- Message --------------------------------
  fun MessageCallback(text) {
      message.image = Image.Text(text, 0.1, 0.1, 0.1, 1, "Sans 14");
      message.sprite = Sprite(message.image);
      message.sprite.SetPosition(screen.half.w - message.image.GetWidth() / 2, screen.half.h + screen.quat.h + 1 * bullet.image.GetHeight());
  }
  Plymouth.SetMessageFunction(MessageCallback);

} else {
  # Nice colour on top of the screen fading to
  Window.SetBackgroundTopColor (0.097, 0.097, 0.097);

  # an equally nice colour on the bottom
  Window.SetBackgroundBottomColor (0.097, 0.097, 0.097);

  # Image animation loop
  for (i = 1; i < 180; i++)
    loader_image[i] = Image("HonkaiSR_" + i + ".png");
  su_sprite = Sprite();


  su_sprite.SetX(Window.GetWidth() / 2 - loader_image[1].GetWidth() / 2); # Place in the centre
  su_sprite.SetY(Window.GetHeight() / 2 - loader_image[1].GetHeight() / 2);

  progress = 1;

  fun refresh_callback ()
    {
      su_sprite.SetImage(loader_image[Math.Int(progress / 3) % 180]);
      progress++;
    }
    
  Plymouth.SetRefreshFunction (refresh_callback);
}

